#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordred_set;
typedef long long ll;
#define pb push_back
#define ca "YES\n"
#define wa "NO\n"

void solve()
{

  ll n, k;
  cin >> n >> k;

  deque<ll> dq;
  ll num;
  for (ll i = 0; i < n; i++)
  {
    cin >> num;
    dq.push_back(num);
  }
  ll ptr=1;
  while(!dq.empty() && k){

    ll f=dq.front();
    ll b=dq.back();
    ll mn=min(f,b);

    if(f<b){
         if(ptr==1){
            if(k>=2*mn){
              k-=2*mn;
              b-=f;
              dq.pop_front();
              dq.pop_back();
              dq.push_back(b);
            }
            else if(k>=2*mn-1){
              dq.pop_front();
              break;
            }
            else{
              break;
            }
         }
         else{
          k--;
          b--;
          dq.pop_back();
          dq.push_back(b);
          ptr=1;
         }
    }
    else if(b<f){
      if (ptr == 0)
      {
        if (k >= 2 * mn)
        {
          k -= 2 * mn;
          f -= b;
          dq.pop_front();
          dq.pop_back();
          dq.push_front(f);
        }
        else if (k >= 2 * mn - 1)
        {
          dq.pop_back();
          break;
        }
        else
        {
          break;
        }
      }
      else
      {
        k--;
        f--;
        dq.pop_front();
        dq.push_front(f);
        ptr = 0;
      }
    }
    else{

      if(dq.size()==1){
        if(k>=f){
          dq.pop_front();
        }
          break;
      }
      if(k>=2*mn){
        dq.pop_front();
        dq.pop_back();
        k-=2*mn;
      }
      else if(k>=2*mn-1){
        dq.pop_back();
        break;
      }
      else{
        break;
      }

    }
    
  }
  cout<<n-dq.size()<<endl;
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  ll t;
  cin >> t;
  while (t--)
    solve();

  return 0;
}
